<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd">

    <!-- 扫描除了Controller层的依赖注入的实例变量 -->
    <context:component-scan base-package="com.wkr">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>
    <!-- 引入数据库属性文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- druid数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据库连接相关信息 -->
        <property name="url" value="${jdbc.url}"/>
        <property name="driverClassName" value="${jdbc.driverClass}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!-- 配置Hibernate的SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <!-- 注入连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置Hibernate属性 -->
        <property name="hibernateProperties">
            <props>
                <!-- 是否展示SQL -->
                <prop key="hibernate.show_sql">true</prop>
                <!-- 是否自动创建表结构 -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!-- 数据库方言 -->
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
                <!-- 配置启用二级缓存 -->
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <!-- 配置使用查询缓存 -->
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <!-- 配置二级缓存的提供商 -->
                <prop key="hibernate.cache.region.factory_class"> org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <!-- 加载缓存所需配置文件 -->
                <prop key="hibernate.net.sf.ehcache.configurationResourceName">classpath:ehcache.xml</prop>
            </props>
        </property>
        <!-- 扫描并加载注解过的实体类 -->
        <property name="packagesToScan" value="com.wkr.bean"/>
    </bean>

    <!-- 配置hibernateTemplate对象 -->
    <!-- hibernateTemplate是spring对hibernate使用的一个简单封装 -->
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
        <!--注入sessionFactory-->
        <property name="sessionFactory" ref="sessionFactory"></property>
        <!-- hibernate报的只读权限的问题添加这个 -->
        <property name="checkWriteOperations" value="false"/>
        <!-- 使用查询缓存 -->
        <property name="cacheQueries" value="true"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <!-- 注入SessionFactory -->
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!--注解方式配置事务：在使用事务处理的方法上添加注解 @Transactional 即可 -->
    <!-- 开启事务扫描，采用注解方式 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
</beans>